{"version":3,"sources":["components/HeaderBar/HeaderBar.js","components/ProductGrid/ProductGrid.js","components/SearchBox/SearchBox.js","components/Homepage/Homepage.js","components/ProductDetail/ProductDetail.js","components/Routing/Routing.js","App.js","serviceWorker.js","index.js"],"names":["HeaderBar","className","src","alt","React","Component","ProductGrid","props","state","count","productList","recipes","this","setState","map","item","key","recipe_id","image_url","title","style","textDecoration","color","to","displayGrid","SearchBox","foodName","foodData","handleClick","bind","handleChange","keyPress","event","preventDefault","target","value","fetchURL","fetch","then","response","json","data","catch","err","console","log","keyCode","type","name","placeholder","onChange","onKeyUp","onClick","displayProductGrid","Homepage","ProductDetail","productID","match","params","productData","publisher","ingredients","source_url","recipe","href","Routing","exact","path","component","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.dfe0b8a0.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./HeaderBar.css\";\r\n\r\nclass HeaderBar extends React.Component {\r\n    render() {\r\n        return(\r\n            <div className=\"Header\">\r\n              <img className=\"HeaderLogo\" src=\"https:bower.io/img/bower-logo.svg\" alt=\"parrot-logo\" />\r\n              <span className=\"HeaderTitle\">PARROT RESTAURANT</span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HeaderBar;\r\n","import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nimport \"./ProductGrid.css\";\r\n\r\nclass ProductGrid extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      count: this.props.productList.count,\r\n      recipes: this.props.productList.recipes,\r\n    };\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if (\r\n      this.state.count !== this.props.productList.count ||\r\n      this.state.recipes !== this.props.productList.recipes\r\n    ) {\r\n      this.setState({\r\n        count: this.props.productList.count,\r\n        recipes: this.props.productList.recipes,\r\n      });\r\n    }\r\n  }\r\n\r\n  displayGrid() {\r\n    return (\r\n      <div>\r\n        <div className=\"ProductSum\">There are {this.state.count} results</div>\r\n        <div className=\"GridContainer\">\r\n          {this.state.recipes.map((item) => {\r\n            return (\r\n              <div className=\"GridItem\" key={item.recipe_id}>\r\n                <img\r\n                  className=\"ItemImg\"\r\n                  src={item.image_url}\r\n                  alt={item.recipe_id}\r\n                />\r\n                <div className=\"ItemTitle\">{item.title}</div>\r\n                <Link style={{textDecoration: \"none\", color: \"rgb(183, 28, 28)\"}} to={`${item.recipe_id}`}><button className=\"DetailButton\">Ingredients Details</button></Link>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return this.displayGrid();\r\n  }\r\n}\r\n\r\nexport default ProductGrid;\r\n","import React from \"react\";\r\n\r\nimport \"./SearchBox.css\";\r\nimport ProductGrid from \"../ProductGrid/ProductGrid.js\";\r\n\r\nclass SearchBox extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { foodName: \"\", foodData: null };\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.keyPress = this.keyPress.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    event.preventDefault();\r\n    this.setState({ foodName: event.target.value });\r\n  }\r\n\r\n  handleClick(event) {\r\n    event.preventDefault();\r\n    const fetchURL = `https://forkify-api.herokuapp.com/api/search?q=${this.state.foodName}`;\r\n    fetch(fetchURL)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        this.setState({ foodData: data });\r\n      })\r\n      .catch((err) => {\r\n        console.log(`Error: ${err}`);\r\n      });\r\n  }\r\n\r\n  keyPress(event) {\r\n    if (event.keyCode === 13) {\r\n      event.preventDefault();\r\n      const fetchURL = `https://forkify-api.herokuapp.com/api/search?q=${this.state.foodName}`;\r\n      fetch(fetchURL)\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          this.setState({ foodData: data });\r\n        })\r\n        .catch((err) => {\r\n          console.log(`Error: ${err}`);\r\n        });\r\n    }\r\n  }\r\n\r\n  displayProductGrid() {\r\n    if (this.state.foodData !== null && this.state.foodName !== \"\") {\r\n      return <ProductGrid productList={this.state.foodData} />;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"SearchContainer\">\r\n        <div className=\"Title\">DELICIOUS, SAME PRICE DISHES</div>\r\n        <div className=\"SubTitle\">Search for your favourite food now...</div>\r\n        <div className=\"Search\">\r\n          <input\r\n            type=\"text\"\r\n            name=\"book-search\"\r\n            className=\"SearchInput\"\r\n            placeholder=\"Search...\"\r\n            onChange={this.handleChange}\r\n            onKeyUp={this.keyPress}\r\n          />\r\n          <button className=\"SearchButton\" onClick={this.handleClick}>\r\n            Search\r\n          </button>\r\n        </div>\r\n        <div className=\"GridContainer\">{this.displayProductGrid()}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nimport HeaderBar from \"../HeaderBar/HeaderBar.js\";\r\nimport SearchBox from \"../SearchBox/SearchBox.js\";\r\n\r\nclass Homepage extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <HeaderBar />\r\n        <SearchBox />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Homepage;\r\n","import React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nimport \"./ProductDetail.css\";\r\n\r\nclass ProductDetail extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      productID: this.props.match.params.productID,\r\n      productData: null,\r\n      image_url: null,\r\n      publisher: null,\r\n      title: null,\r\n      ingredients: null,\r\n      source_url: null,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const fetchURL = `https://forkify-api.herokuapp.com/api/get?rId=${this.state.productID}`;\r\n    fetch(fetchURL)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        this.setState({ productData: data });\r\n        this.setState({ image_url: this.state.productData.recipe.image_url });\r\n        this.setState({ publisher: this.state.productData.recipe.publisher });\r\n        this.setState({ title: this.state.productData.recipe.title });\r\n        this.setState({\r\n          ingredients: this.state.productData.recipe.ingredients,\r\n        });\r\n        this.setState({ source_url: this.state.productData.recipe.source_url });\r\n      })\r\n      .catch((err) => {\r\n        console.log(`Error: ${err}`);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Container\">\r\n        <div className=\"DetailContainer\">\r\n          <img\r\n            className=\"DetailImage\"\r\n            src={this.state.image_url}\r\n            alt={this.state.title}\r\n          />\r\n          <div className=\"DetailTitle\">{this.state.title}</div>\r\n          <div className=\"DetailSubtitle\">Ingredients:</div>\r\n          <div className=\"DetailIngredients\">\r\n            <i>{this.state.ingredients}</i>\r\n          </div>\r\n          <div>\r\n            <a href={this.state.source_url} target=\"_blank\">\r\n              Source\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProductDetail;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\nimport Homepage from \"../Homepage/Homepage.js\";\r\nimport ProductDetail from \"../ProductDetail/ProductDetail.js\";\r\n\r\nclass Routing extends React.Component {\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <Homepage />\r\n          </Route>\r\n          <Route path=\"/:productID\" component={ProductDetail} />\r\n        </Switch>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Routing;\r\n","import React from 'react';\r\n\r\n// import Homepage from './components/Homepage/Homepage.js';\r\nimport Routing from \"./components/Routing/Routing.js\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Routing />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}